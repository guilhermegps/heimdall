/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package heimdall.Forms;

import heimdall.EncriptaDecriptaAES;
import heimdall.ExecutaSQL;
import heimdall.Portatil.JTableRenderer;
import heimdall.SenhaAutomatica;
import heimdall.Util.Componente;
import heimdall.Util.ComponenteRevisado;
import heimdall.Util.ComponenteRevisao;
import heimdall.Util.Revisao;
import heimdall.Util.Usuario;
import heimdall.Util.Veiculo;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author guilherme
 */
public class JRevisao extends javax.swing.JDialog {

    private DefaultTableModel dtm;
    private File f;
    private Veiculo veiculo;
    private Usuario usuario; 
    private ArrayList<OrigemComponenteRevisado> componentes;
    
    /**
     * Creates new form JRevisao
     */    
    public JRevisao(Veiculo veiculo, Usuario usuario) {
        this.veiculo = veiculo;
        this.usuario = usuario;
        componentes = new ArrayList<OrigemComponenteRevisado>();
        setModal(true);
        this.f = new File("");
        initComponents();
        initTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfBusca = new javax.swing.JTextField();
        bBusca = new javax.swing.JButton();
        bConcluirRevisao = new javax.swing.JButton();
        bCancelarRevisao = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tRevisaoComponentes = new javax.swing.JTable();
        tfLinhasTabela = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfIdVeiculo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescricao = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Revisão do Veículo");
        setResizable(false);

        bBusca.setText("Buscar");
        bBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscaActionPerformed(evt);
            }
        });

        bConcluirRevisao.setText("Concluir");
        bConcluirRevisao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConcluirRevisaoActionPerformed(evt);
            }
        });

        bCancelarRevisao.setText("Cancelar");
        bCancelarRevisao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarRevisaoActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tRevisaoComponentes.setAutoCreateRowSorter(true);
        tRevisaoComponentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número RFID", "Verificação", "Revisado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tRevisaoComponentes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tRevisaoComponentes);
        if (tRevisaoComponentes.getColumnModel().getColumnCount() > 0) {
            tRevisaoComponentes.getColumnModel().getColumn(0).setMinWidth(120);
            tRevisaoComponentes.getColumnModel().getColumn(1).setMinWidth(160);
            tRevisaoComponentes.getColumnModel().getColumn(2).setMinWidth(95);
        }

        tfLinhasTabela.setEditable(false);

        jLabel9.setText("Nº");

        tfIdVeiculo.setEditable(false);

        jLabel1.setText("Veículo:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(tfIdVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfLinhasTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(tfLinhasTabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(tfIdVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jLabel2.setText("Descrição da Revisão:");

        taDescricao.setColumns(20);
        taDescricao.setRows(5);
        jScrollPane2.setViewportView(taDescricao);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfBusca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bBusca))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bConcluirRevisao, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bCancelarRevisao, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBusca))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bConcluirRevisao)
                    .addComponent(bCancelarRevisao))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscaActionPerformed
        abrir();
    }//GEN-LAST:event_bBuscaActionPerformed

    private void bCancelarRevisaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarRevisaoActionPerformed
        dispose();
    }//GEN-LAST:event_bCancelarRevisaoActionPerformed

    private void bConcluirRevisaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConcluirRevisaoActionPerformed
        doConcluirRevisao();
    }//GEN-LAST:event_bConcluirRevisaoActionPerformed
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JRevisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JRevisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JRevisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JRevisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JRevisao(new Veiculo(), new Usuario()).setVisible(true);
            }
        });
    }
    
    private void initTable(){
        DefaultTableModel dtm = (DefaultTableModel) tRevisaoComponentes.getModel();
        
        while(dtm.getRowCount()>0){
            dtm.removeRow(0);
        }
                
        for(int i=0;i<componentes.size();i++){
            ImageIcon icone = new ImageIcon();
            
            if(componentes.get(i).getComponenteRevisado().isIdentificado())
                icone = new ImageIcon(getClass().getResource("/heimdall/img/icons 16x16/accept.png"));
            else
                icone = new ImageIcon(getClass().getResource("/heimdall/img/icons 16x16/cancel.png"));
            
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss"); 
            dtm.addRow(
                    new Object[] {componentes.get(i).getComponenteRevisado().getRFID(), 
                        (componentes.get(i).getComponenteRevisado().getIdentificao()==null) ? "" : sdf.format(componentes.get(i).getComponenteRevisado().getIdentificao()), 
                        icone}
            );   
        }
        
        TableColumnModel columnModel = tRevisaoComponentes.getColumnModel();
        JTableRenderer renderer = new JTableRenderer();
        columnModel.getColumn(2).setCellRenderer(renderer);
        
        tfIdVeiculo.setText(veiculo.toString());
        tRevisaoComponentes.setModel(dtm);
        tfLinhasTabela.setText(Integer.toString(dtm.getRowCount()));
    }
    
    private void revisar(ArrayList<ComponenteRevisado> listaCompArquivo){
        ExecutaSQL sql = new ExecutaSQL();
        ArrayList<Componente> aux = sql.SELECT_COMPONENTE("veiculo_id_veiculo", Integer.toString(veiculo.getId()));
        
        for(int i=0; i<aux.size(); i++){
            int posicaoComp = pesquisaComponenteArquivo(aux.get(i).getRfid(), listaCompArquivo);// Verifica se o registro de componente existe no arquivo importado
            if(posicaoComp>=0){
                listaCompArquivo.get(posicaoComp).setIdentificado(true);
                componentes.add(new OrigemComponenteRevisado(listaCompArquivo.get(posicaoComp), true, true));
            } else{
                listaCompArquivo.add(new ComponenteRevisado(
                        aux.get(i).getRfid(), 
                        aux.get(i).getVeiculo().getPlaca(), 
                        false, 
                        "", 
                        null )
                );
                componentes.add(new OrigemComponenteRevisado(listaCompArquivo.get(listaCompArquivo.size()-1), false, true));
            }
        }
        
        for(int i=0; i<listaCompArquivo.size(); i++){
            if(pesquisaComponente(listaCompArquivo.get(i).getRFID())<0){
                componentes.add(new OrigemComponenteRevisado(listaCompArquivo.get(i), true, false));
            }
        }
        
        initTable();
    }
    
    private int pesquisaComponente(String rfid){
        for(int i=0; i<componentes.size(); i++){
            if(rfid.equals(componentes.get(i).getComponenteRevisado().getRFID())){
                return i;
            }
        }
        
        return -1;
    }
    
    private int pesquisaComponenteArquivo(String rfid, ArrayList<ComponenteRevisado> listaCompArquivo){
        for(int i=0; i<listaCompArquivo.size(); i++){
            if(rfid.equals(listaCompArquivo.get(i).getRFID())){
                return i;
            }
        }
        
        return -1;
    }
    
    private void abrir(){
        EncriptaDecriptaAES AES = new EncriptaDecriptaAES();
        SimpleDateFormat sdf = new SimpleDateFormat("dd_MM_yyyy_HH_mm_ss"); 
        byte bytesArquivo[];
        String caminhoArquivo = buscarArquivo();
        
        if(caminhoArquivo.compareTo("")==0)
            return;
        
        tfBusca.setText(caminhoArquivo);
        if(this.f.exists() && this.f.isFile()){
                bytesArquivo = AES.getBytesFile(this.f);
                
                if(bytesArquivo==null || bytesArquivo.length<=0)
                    return;
                
                File temporario = new File(new SenhaAutomatica(16).gerarSenha()+sdf.format(new Date())+".temp"); //Gera arquivo temporário
                
            try {
                FileOutputStream esc;
                esc = new FileOutputStream(temporario);
                esc.write(AES.decriptaAES(bytesArquivo));
                esc.close();
                
                FileInputStream ler = new FileInputStream(temporario);
                ObjectInputStream objLer = new ObjectInputStream(ler);
                ArrayList<ComponenteRevisado> listaCompArquivo = (ArrayList<ComponenteRevisado>) objLer.readObject();
                temporario.delete();  
                
                if(listaCompArquivo.size()<=0)
                    return;
                
                //Desabilita a busca
                bBusca.setEnabled(false);
                tfBusca.setEnabled(false);
                
                for(int i=0; i<listaCompArquivo.size(); i++){//Marca todos os componentes importados do arquivo como não identificados
                    listaCompArquivo.get(i).setIdentificado(false);
                }
                
                revisar(listaCompArquivo);
                JOptionPane.showMessageDialog(null, "Revisão importada com sucesso.");
                int resp = JOptionPane.showConfirmDialog(null,"Deseja apagar o arquivo de revisão "+this.f.getName()+"?","Apagar arquivo de revisão?",JOptionPane.YES_NO_OPTION);
                if(resp==0){
                    this.f.delete();
                }
            } catch (Exception ex) {
                new JErro(true, ex, true, false, false);
            }          
        } else{
            JOptionPane.showMessageDialog(null, "O arquivo não pode ser encontrado.");
        }
    }
    
    private String buscarArquivo(){
        try{
            JFileChooser fileChooser = new JFileChooser(this.f.getAbsolutePath());  
            fileChooser.setFileFilter(new FileNameExtensionFilter("Arquivo de Revisão (*.rev)", "rev"));
            int option = fileChooser.showOpenDialog(null);
            if (option == JFileChooser.APPROVE_OPTION) {
                this.f = fileChooser.getSelectedFile();
                String enderecoArquivo = fileChooser.getSelectedFile().toString();
                if(enderecoArquivo.substring(enderecoArquivo.lastIndexOf("."), enderecoArquivo.length()).toUpperCase().compareTo(".REV")==0)
                    return enderecoArquivo;
                else
                    JOptionPane.showMessageDialog(null, "O arquivo selecionado não tem extensão '.rev'.");
            } else{
                new JErro(true, "Este endereço de arquivo é inválido", false, false, false);
            }              
        }catch(Exception ex){
            new JErro(true, ex, true, true, false);
        }
        return "";
    }
    
    private void inserirRevisao(){
        ExecutaSQL sql = new ExecutaSQL();
        
        int idRevisao = sql.INSERT_REVISAO(new Revisao(
                0, 
                usuario, 
                veiculo, 
                new Timestamp(new Date().getTime()), 
                taDescricao.getText() )
        );
        
        Revisao revisao = sql.SELECT_REVISAO("id_revisao", Integer.toString(idRevisao)).get(0);
        for(int i=0; i<componentes.size(); i++){
            Componente componente = sql.SELECT_COMPONENTE("vc_rfid_componente", '\''+componentes.get(i).getComponenteRevisado().getRFID()+'\'').get(0);
            
            sql.INSERT_COMPONENTE_REVISAO(new ComponenteRevisao(
                        componente, 
                        revisao, 
                        componentes.get(i).getComponenteRevisado().isIdentificado(), 
                        componentes.get(i).getComponenteRevisado().getIdentificao(), 
                        componentes.get(i).getComponenteRevisado().getMotivoNaoIdentificado() 
                )
            );
        }
    }
    
    private void doConcluirRevisao(){
        if(componentes.size()<=0){
            JOptionPane.showMessageDialog(null, "Não há componentes para serem revisados.");
            return;
        }
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss"); 
        for(int i=0; i<componentes.size(); i++){
            if(componentes.get(i).getComponenteRevisado().isIdentificado())
                continue;
            
            JMotivoNaoRevisado motivoNaoRevisado = new JMotivoNaoRevisado(
                    componentes.get(i).isExisteArquivo(), 
                    (componentes.get(i).getComponenteRevisado().getIdentificao()==null) ? "" : sdf.format(componentes.get(i).getComponenteRevisado().getIdentificao()), 
                    componentes.get(i).getComponenteRevisado().getRFID()
            );
            motivoNaoRevisado.setVisible(true);
            
            if(motivoNaoRevisado.isCancelado()){
                dispose();
                return;
            }
            
            componentes.get(i).getComponenteRevisado().setMotivoNaoIdentificado(motivoNaoRevisado.getMotivo());
        }
        
        inserirRevisao();
        JOptionPane.showMessageDialog(null, "Revisão concluida com sucesso.");
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBusca;
    private javax.swing.JButton bCancelarRevisao;
    private javax.swing.JButton bConcluirRevisao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tRevisaoComponentes;
    private javax.swing.JTextArea taDescricao;
    private javax.swing.JTextField tfBusca;
    private javax.swing.JTextField tfIdVeiculo;
    private javax.swing.JTextField tfLinhasTabela;
    // End of variables declaration//GEN-END:variables

    private class OrigemComponenteRevisado{
        private ComponenteRevisado componenteRevisado;
        private boolean existeArquivo;
        private boolean existeVeiculo;

        public OrigemComponenteRevisado(ComponenteRevisado componenteRevisado, boolean existeArquivo, boolean existeVeiculo) {
            this.componenteRevisado = componenteRevisado;
            this.existeArquivo = existeArquivo;
            this.existeVeiculo = existeVeiculo;
        }

        public ComponenteRevisado getComponenteRevisado() {
            return componenteRevisado;
        }

        public void setComponenteRevisado(ComponenteRevisado componenteRevisado) {
            this.componenteRevisado = componenteRevisado;
        }

        public boolean isExisteArquivo() {
            return existeArquivo;
        }

        public void setExisteArquivo(boolean existeArquivo) {
            this.existeArquivo = existeArquivo;
        }

        public boolean isExisteVeiculo() {
            return existeVeiculo;
        }

        public void setExisteVeiculo(boolean existeVeiculo) {
            this.existeVeiculo = existeVeiculo;
        }
    } 
}
